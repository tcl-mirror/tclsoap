# typedvar.test - Copyright (C) 2001 Pat Thoyts <Pat.Thoyts@bigfoot.com>
#
# Provide a set of tests to excercise the XMLRPC::TypedVariable package.
#
# -------------------------------------------------------------------------
# This software is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the accompanying file `LICENSE'
# for more details.
# -------------------------------------------------------------------------
#
# @(#)$Id$

# Initialize the required packages

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
    #source [file join [pwd] [file dirname [info script]] defs.tcl]
}

if {[catch {package require XMLRPC::TypedVariable}]} {
    catch {puts stderr "Cannot load the XMLRPC::TypedVariable package"}
    return
}

# -------------------------------------------------------------------------

# Basic variable manipulation

catch {unset t0}
catch {unset t1}

test typedvar-1.1 {Basic variable creation} {
    set failed [catch {XMLRPC::TypedVariable::create int 2} result]
    if { ! $failed } {
        set failed [catch {
            XMLRPC::TypedVariable::is_typed_variable $result
        } result]
    }
    set result
} {1}

test typedvar-1.2 {Basic variable test negative} {
    set t0 {}
    catch {XMLRPC::TypedVariable::is_typed_variable t0} result
    set result
} {0}

test typedvar-1.3 {Basic variable test get type} {
    set failed [catch {XMLRPC::TypedVariable::create int 2} result]
    if { ! $failed } {
        set failed [catch {
            XMLRPC::TypedVariable::get_type $result
        } result]
    }
    set result
} {int}

test typedvar-1.4 {Basic variable test get value} {
    set failed [catch {XMLRPC::TypedVariable::create int 2} result]
    if { ! $failed } {
        set failed [catch {
            XMLRPC::TypedVariable::get_value $result
        } result]
    }
    set result
} {2}

test typedvar-1.6 {Basic variable destruction} {
    set failed [catch {XMLRPC::TypedVariable::create int 2} result]
    if { ! $failed } {
        set failed [catch {
            XMLRPC::TypedVariable::destroy $result
        } result]
    }
    if { ! $failed } {
        catch {XMLRPC::TypedVariable::is_typed_variable $result} result
    }
    set result
} {0}

catch {unset t0}
catch {unset t1}

# -------------------------------------------------------------------------

# Nasty types test

test typedvar-2.1 {Nasty variable creation} {
    set failed [catch {
        XMLRPC::TypedVariable::create {$ztype} {$zvalue}
    } result]
    if { ! $failed } {
        set failed [catch {
            XMLRPC::TypedVariable::is_typed_variable $result
        } result]
    }
    set result
} {1}

test typedvar-2.2 {Nasty variable test get type} {
    set failed [catch {
        XMLRPC::TypedVariable::create {$ztype} {$zvalue}
    } result]
    if { ! $failed } {
        set failed [catch {
            XMLRPC::TypedVariable::get_type $result
        } result]
    }
    set result
} {$ztype}

test typedvar-2.4 {Nasty variable test get value} {
    set failed [catch {
        XMLRPC::TypedVariable::create {$ztype} {$zvalue}
    } result]
    if { ! $failed } {
        set failed [catch {
            XMLRPC::TypedVariable::get_value $result
        } result]
    }
    set result
} {$zvalue}

test typedvar-2.6 {Nasty variable destruction} {
    set failed [catch {
        XMLRPC::TypedVariable::create {$ztype} {$zvalue}
    } result]
    if { ! $failed } {
        set failed [catch {
            XMLRPC::TypedVariable::destroy $result
        } result]
    }
    if { ! $failed } {
        catch {XMLRPC::TypedVariable::is_typed_variable $result} result
    }
    set result
} {0}

catch {unset t1}

# -------------------------------------------------------------------------

# test the type guessing code

test typedvar-3.1 {Guess type of integer} {
    catch {XMLRPC::TypedVariable::get_type 2} result
    set result
} {int}

test typedvar-3.2 {Guess type of double} {
    catch {XMLRPC::TypedVariable::get_type 2.5} result
    set result
} {double}

test typedvar-3.3 {Guess type of struct} {
    catch {unset t0}
    array set t0 {}
    catch {XMLRPC::TypedVariable::get_type t0} result
    catch {unset t0}
    set result
} {struct}

test typedvar-3.4 {Guess type of boolean true} {
    catch {XMLRPC::TypedVariable::get_type true} result
    set result
} {boolean}

test typedvar-3.5 {Guess type of boolean false} {
    catch {XMLRPC::TypedVariable::get_type false} result
    set result
} {boolean}

test typedvar-3.6 {Guess type of string} {
    catch {XMLRPC::TypedVariable::get_type hello} result
    set result
} {string}

# -------------------------------------------------------------------------

# Clean up the tests

::tcltest::cleanupTests
return

# Local variables:
#    mode: tcl
#    indent-tabs-mode: nil
# End:
