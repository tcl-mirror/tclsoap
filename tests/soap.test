# soap.test - Copyright (C) 2001 Pat Thoyts <pat@zsplat.freeserve.co.uk>
#
# Provide a set of tests to excercise the SOAP package.
#
# @(#)$Id: soap.test,v 1.1 2001/03/17 01:38:47 pat Exp pat $

# Initialize the required packages

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
    #source [file join [pwd] [file dirname [info script]] defs.tcl]
}

if {[catch {package require SOAP}]} {
    catch {puts stderr "Cannot load the SOAP package"}
    return
}

# -------------------------------------------------------------------------

# Test transport method returns the query. Should result in SOAP::invoke
# returning the parameters to the method.

proc ::SOAP::transport_test { procName url soap } {
    set ::SOAP::testXML $soap
    return $soap
}

# -------------------------------------------------------------------------

# SOAP method creation and configuration test.

test soap-1.1 {SOAP Method creation} {
    SOAP::create soapTest \
	    -uri urn:soap-Test \
	    -proxy http://localhost:8015/soap/test \
	    -params { "arg" "string" } \
	    -name mySoapTest \
	    -action soap-Test \
	    -transport ::SOAP::transport_test
} {::soapTest}

test soap-1.2 {SOAP cget URI value} {
    catch {SOAP::cget ::soapTest -uri} result
    set result
} {urn:soap-Test}

test soap-1.3 {Reset the URI value} {
    catch {SOAP::configure ::soapTest -uri urn:new-soap-Test} result
    set result
} {::soapTest}

test cget-1.4 {SOAP cget the new value} {
    catch {SOAP::cget ::soapTest -uri} result
    set result
} {urn:new-soap-Test}

# -------------------------------------------------------------------------

test soap-2.1 {XML generation with no arguments} {
    catch {::soapTest} result
    set result
} {wrong # args: should be "::soapTest arg"}

test soap-2.2 {XML generation with one argument} {
    if { ! [catch {::soapTest testParameter} result] } {
        set result $::SOAP::testXML
    }
    set result
} {<?xml version='1.0'?>
<SOAP-ENV:Envelope xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsd="http://www.w3.org/1999/XMLSchema"><SOAP-ENV:Body><ns:mySoapTest xmlns:ns="urn:new-soap-Test"><arg xsi:type="xsd:string">testParameter</arg></ns:mySoapTest></SOAP-ENV:Body></SOAP-ENV:Envelope>}

test soap-2.3 {XML generation with two arguments} {
    set failed [catch {::SOAP::configure ::soapTest \
            -params { "text" "string" "number" "double" }} result]
    if { ! $failed } {
        set ok [catch {::soapTest textParam 1.3} result]
    }
    if { ! $failed } {
        set result $::SOAP::testXML
    }
    set result
} {<?xml version='1.0'?>
<SOAP-ENV:Envelope xmlns:xsi="http://www.w3.org/1999/XMLSchema-instance" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/" xmlns:xsd="http://www.w3.org/1999/XMLSchema"><SOAP-ENV:Body><ns:mySoapTest xmlns:ns="urn:new-soap-Test"><text xsi:type="xsd:string">textParam</text><number xsi:type="xsd:double">1.3</number></ns:mySoapTest></SOAP-ENV:Body></SOAP-ENV:Envelope>}

# -------------------------------------------------------------------------

# Clean up the tests

::tcltest::cleanupTests
return

# Local variables:
#    mode: tcl
#    indent-tabs-mode: nil
# End:
