# soap.test - Copyright (C) 2001 Pat Thoyts <pat@zsplat.freeserve.co.uk>
#
# Provide a set of tests to excercise the SOAP package.
#
# @(#)$Id$

# Initialize the required packages

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest
    namespace import ::tcltest::*
    #source [file join [pwd] [file dirname [info script]] defs.tcl]
}

if {[catch {package require -exact SOAP 1.2}]} {
    catch {puts stderr "Cannot load SOAP 1.2 package"}
    return
}

# -------------------------------------------------------------------------

# Test transport method returns the query. Should result in SOAP::invoke
# returning the parameters to the method.

proc ::SOAP::transport_test { procName url soap } {
    return $soap
}

# -------------------------------------------------------------------------

# SOAP::create test

test create-1.1 {SOAP Method creation} {
    SOAP::create soapTest \
	    -uri urn:soap-Test \
	    -proxy http://127.0.0.1/soap/test \
	    -params { "arg" "string" } \
	    -name mySoapTest \
	    -action soap-Test \
	    -transport ::SOAP::transport_test
} {::soapTest}

test cget-1.1 {SOAP cget} {
    SOAP::cget ::soapTest -uri
} {urn:soap-Test}

test configure-1.1 {SOAP configure value} {
    SOAP::configure ::soapTest -uri urn:new-soap-Test
} {::soapTest}

test cget-1.2 {SOAP cget new value} {
    SOAP::cget ::soapTest -uri
} {urn:new-soap-Test}

test invoke-1.1 {Invoke SOAP method locally} {
    catch { ::soapTest }
} {1}

test invoke-1.2 {Invoke SOAP method locally} {
    ::soapTest testParameter
} {testParameter}

test invoke-1.3 {Invoke with extra parameters -- 
I know this fails at the moment
} {
    ::SOAP::configure ::soapTest \
            -params { "text" "string" "number" "double" }
    ::soapTest textParam 1.3
} {textParam 1.3}

# -------------------------------------------------------------------------

# Clean up the tests

::tcltest::cleanupTests
return

# Local variables:
#    mode: tcl
#    indent-tabs-mode: nil
# End:
