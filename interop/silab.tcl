# silab.tcl - Copyright (C) 2001 Pat Thoyts <Pat.Thoyts@bigfoot.com>
#
# Run the SOAP Interoperability Test Suite Round 2: Base tests.
# Generates a html page of the results.
#
# $Id$

package require soapinterop::base
package require soapinterop::C

set logdir   {silab}
set logcount 0
set logfile  {}

#      toolkit          endpoint  action   namespace
set round1 {
    {{ActiveState}     http://soaptest.activestate.com:8080/PerlEx/soap.plex urn:soapinterop http://soapinterop.org/}
    {{Apache 2.1}      http://nagoya.apache.org:5089/soap/servlet/rpcrouter  urn:soapinterop http://soapinterop.org/}
    {{4s4c}            http://soap.4s4c.com/interop/soap.asp                 urn:soapinterop http://soapinterop.org/}
    {{Dolphin Harbor}  http://www.dolphinharbor.org/services/interop         urn:soapinterop http://soapinterop.org/}
    {{EasySoap++}      http://www.xmethods.net/c/easysoap.cgi                urn:soapinterop http://soapinterop.org/}
    {{eSoapServer}     http://www.connecttel.com/cgi-bin/esoapserver.cgi     urn:soapinterop http://soapinterop.org/}
    {{Frontier 7.0}    http://www.soapware.org:80/xmethodsInterop            /xmethodsInterop http://soapinterop.org/}
    {{SOAP::Lite}      http://services.soaplite.com/interop.cgi              urn:soapinterop http://soapinterop.org/}
    {{SOAP.py}         http://208.177.157.221:9595/xmethodsInterop           urn:soapinterop http://soapinterop.org/}
}

# round 2 http://www.whitemesa.com/interop.htm
#{Apache Axis}      http://nagoya.apache.org:5049/axis/servlet/AxisServlet
#{Apache SOAP}      http://nagoya.apache.org:5049/soap/servlet/rpcrouter
#{{eSOAP}            http://212.177.97.8:8080/rpcrouter http://soapinterop.org/ http://soapinterop.org/}
#{{SOAP RMI}         http://www.extreme.indiana.edu:1568  http://soapinterop.org/ http://soapinterop.org/}
#{{kSOAP 0.8}        http://kissen.cs.uni-dortmind.de:8008               http://soapinterop.org/ http://soapinterop.org/}
set round2base {
    {{SOAP4R}           http://www.jin.gr.jp/~nahi/Ruby/SOAP4R/SOAPBuildersInterop/ http://soapinterop.org/ http://soapinterop.org/}
    {{EasySoap++}       http://easysoap.sourceforge.net/cgi-bin/interopserver       http://soapinterop.org/ http://soapinterop.org/}
    {{TclSOAP 1.6}      http://tclsoap.sourceforge.net/cgi-bin/rpc          http://soapinterop.org/ http://soapinterop.org/}
    {{SOAPx4 (PHP) .5}  http://dietrich.ganx4.com/soapx4/soap.php           http://soapinterop.org/ http://soapinterop.org/}
    {{4s4c}             http://soap.4s4c.com/ilab/soap.asp                  http://soapinterop.org/ http://soapinterop.org/}
    {{SOAP::Lite}       http://services.soaplite.com/interop.cgi            http://soapinterop.org/ http://soapinterop.org/}
    {{Spray}            http://www.dolphinharbor.org/services/interop       http://soapinterop.org/ http://soapinterop.org/}
    {{White Mesa SOAP}  http://www.whitemesa.net/interop/std                http://soapinterop.org/ http://soapinterop.org/}
    {{ASP.NET}          http://www.mssoapinterop.org/asmx/simple.asmx       http://soapinterop.org/ http://soapinterop.org/}
    {{MS .NET Remoting} http://www.mssoapinterop.org/remoting/ServiceA.soap http://soapinterop.org/ http://soapinterop.org/}
    {{SQLData SOAP}     http://soapclient.com/interop/sqldatainterop.wsdl   http://soapinterop.org/ http://soapinterop.org/}
}

set round2C {
    {{SOAP::Lite}       http://services.soaplite.com/interopC.cgi              http://soapinterop.org/ http://soapinterop.org/}
    {{White Mesa SOAP}  http://www.whitemesa.net/interop/std/echohdr           http://soapinterop.org/ http://soapinterop.org/}
    {{EasySoap++}       http://easysoap.sourceforge.net/cgi-bin/interopserver  http://soapinterop.org/ http://soapinterop.org/}
    {{MS SOAP Toolkit}  http://mssoapinterop.org/stk/InteropC.wsdl             http://soapinterop.org/ http://soapinterop.org/}
}

# -------------------------------------------------------------------------

proc silab:round1 {} {
    set title {SILAB Round 1 Tests called from TclSOAP}
    set info {
	This page is generated by a Tcl script that uses the TclSOAP client code
	against a list of SOAP servers implementing the SOAP Interoperability Lab
	Round 2 proposal A service. The results are printed as OK or the error is
	shown. The raw XML for the reqyest and the reply is available via links in
	each table. If there is no XML then the error occurred in the TclSOAP client
	code or the server is down.}
    set filename "round1.html"
    silab:execute $filename $title $info $::round1 proposalA
}

proc silab:round2 {} {
    set title {SILAB Round 2 Base Tests called via TclSOAP}
    set info {
	This page is generated by a Tcl script that uses the TclSOAP client code
	against a list of SOAP servers implementing the SOAP Interoperability Lab
	Round 2 proposal A service. The results are printed as OK or the error is
	shown. The raw XML for the request and the reply is available via links in
	each table. If there is no XML then the error occurred in the TclSOAP client
	code or the server is down.}
    set filename "round2base.html"
    silab:execute $filename $title $info $::round2base proposalA
}

# -------------------------------------------------------------------------

proc silab:round2C {} {
    set title {SILAB Round 2 Proposal C Tests called via TclSOAP}
    set info {
	This page is generated by a Tcl script that uses the TclSOAP client code
	against a list of SOAP servers implementing the SOAP Interoperability Lab
	Round 2 proposal C service. The results are printed as OK or the error is
	shown. The raw XML for the request and the reply is available via links in
	each table. If there is no XML then the error occurred in the TclSOAP client
	code or the server is down.}
    set filename "round2C.html"
    silab:execute $filename $title $info $::round2C proposalC
}

# -------------------------------------------------------------------------

# procname - procedure to execute to perform the tests.

proc silab:execute {filename title info servers procname} {
    global logdir
    global logfile

    if {![file isdirectory $logdir]} {
	file mkdir $logdir
    }
    set logfile [open [file join $logdir $filename] w]
    puts $logfile "<!doctype HTML public \"-//W3O//DTD W3 HTML 2.0//EN\">\
	    <html><head><title>$title</title></head>"
    puts $logfile "<body><h1>$title</h1><p>$info</p>\n<ul>"
    foreach server $servers {
	puts $logfile "<li><a href=\"#[lindex $server 0]\">[lindex $server 0]</a></li>"
    }
    puts $logfile "</ul><hr>"
    flush $logfile
    
    foreach server $servers {
	if {[catch [list $procname \
			[lindex $server 0] [lindex $server 1] [lindex $server 2] [lindex $server 3] \
		       ] msg ]} {
	    puts $logfile "<font color=\"red\"><h3>An Error occurred processing [lindex $server 0]</h3>\
		    <p>$msg</p></font>"
	}
	flush $logfile
    }

    puts $logfile "<p><font size=-1>Last Updated:\
	    [clock format [clock seconds]]</font></p>\
	    </body></html>"
    close $logfile
}
    
# -------------------------------------------------------------------------
# Description:
#  Setup and run the base SOAP Interop Lab Client tests.
#
proc proposalA {toolkit where action xmlns} {
    global logfile

    set soapinterop::uri $xmlns
    set soapinterop::action $action
    soapinterop::create:base $where

    puts $logfile "<h2><a name=\"$toolkit\">$toolkit $where</a></h2>\n<table>\n"

    perform $toolkit soapinterop::validate.echoVoid
    perform $toolkit soapinterop::validate.echoDate
    perform $toolkit soapinterop::validate.echoBase64
    perform $toolkit soapinterop::validate.echoInteger
    perform $toolkit soapinterop::validate.echoFloat
    perform $toolkit soapinterop::validate.echoString
    perform $toolkit soapinterop::validate.echoIntegerArray
    perform $toolkit soapinterop::validate.echoFloatArray
    perform $toolkit soapinterop::validate.echoStringArray
    perform $toolkit soapinterop::validate.echoStruct
    perform $toolkit soapinterop::validate.echoStructArray

    puts $logfile "</table><hr>\n\n"
    return {}
}

# -------------------------------------------------------------------------
# Description:
#  Setup and run the Round 2 Proposal C tests (found in soapinteropC.tcl)
#
proc proposalC {toolkit where action xmlns} {
    global logfile

    SOAP::create soapinterop::echoVoid -name echoVoid \
	-proxy $where -uri $xmlns -action $action
    puts $logfile "<h2><a name=\"$toolkit\">$toolkit $where</a></h2>\n<table>\n"

    perform $toolkit soapinterop::validate.emsr:A echoVoid propc
    perform $toolkit soapinterop::validate.emsr:B echoVoid propc
    perform $toolkit soapinterop::validate.emsr:C echoVoid propc
    perform $toolkit soapinterop::validate.emsr:D echoVoid propc
    perform $toolkit soapinterop::validate.emsr:E echoVoid propc
    perform $toolkit soapinterop::validate.emsr:F echoVoid propc
    perform $toolkit soapinterop::validate.emtr:A echoVoid propc
    perform $toolkit soapinterop::validate.emtr:B echoVoid propc
    perform $toolkit soapinterop::validate.emtr:C echoVoid propc
    perform $toolkit soapinterop::validate.emtr:D echoVoid propc
    perform $toolkit soapinterop::validate.emtr:E echoVoid propc
    perform $toolkit soapinterop::validate.emtr:F echoVoid propc

    puts $logfile "</table><hr>\n\n"
    return {}
}
    
# -------------------------------------------------------------------------
# Description:
#  Perform a SOAP call. Capture the request and reply XML packets and save
#  to unique files under `logdir'. Appends a suitable log message to the
#  `logfile'
#
proc perform {toolkit procname {methodname {}} {prefix dump}} {
    global logfile
    global logdir
    global logcount

    set name [lindex [split $procname .] end]
    if {$methodname != {}} {set name $methodname}
    set failed [catch [list $procname] msg]
    if {$failed} {
	set msg [string map {< &lt; > &gt; & &amp;} $msg]
	set msg "<font color=\"red\">$msg</font>"
    } else {
	set msg ok
    }
    
    puts $logfile "<tr><td>$name</td><td>$msg</td>"

    set request [file join $logdir "${prefix}${logcount}.xml"] ; incr logcount
    set reply   [file join $logdir "${prefix}${logcount}.xml"] ; incr logcount

    set err [catch {SOAP::dump -req soapinterop::$name} xml]
    set f [open $request w]
    puts -nonewline $f $xml
    close $f

    catch {SOAP::dump soapinterop::$name} xml
    set f [open $reply w]
    puts -nonewline $f $xml
    close $f

    puts $logfile "<td><a href=\"[file tail $request]\">request</a></td>\
	    <td><a href=\"[file tail $reply]\">reply</a></td></tr>"
}